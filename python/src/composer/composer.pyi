"""
Type stubs for the composer native module.

This file provides type annotations for the compiled Rust extension,
enabling static type checking with tools like mypy, pyright, and pylance.
"""

from typing import Any

# Core Classes

class Chord:
    """Represents a musical chord with comprehensive analysis capabilities."""

    def __init__(
        self,
        root: int,
        chord_type: int,
        inversion: int | None = None,
        applied: int | None = None,
        borrowed: str | None = None,
    ) -> None: ...
    @staticmethod
    def triad(root: int) -> Chord: ...
    @staticmethod
    def seventh(root: int) -> Chord: ...
    @staticmethod
    def rest() -> Chord: ...
    @property
    def root(self) -> int: ...
    @property
    def chord_type(self) -> int: ...
    @property
    def inversion(self) -> int: ...
    @property
    def applied(self) -> int: ...
    @property
    def adds(self) -> list[int]: ...
    @property
    def omits(self) -> list[int]: ...
    @property
    def alterations(self) -> list[str]: ...
    @property
    def suspensions(self) -> list[int]: ...
    @property
    def borrowed(self) -> BorrowedScale | None: ...
    @property
    def is_rest(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...

class BorrowedScale:
    """Represents a borrowed scale for chord analysis."""

    def __init__(self, scale_name: str) -> None: ...
    @property
    def scale_name(self) -> str | None: ...
    def __repr__(self) -> str: ...

class ScaleFingerprint:
    """Represents a scale as a 12-bit fingerprint for efficient analysis."""

    def __init__(self, pattern: list[bool]) -> None: ...
    @staticmethod
    def major() -> ScaleFingerprint: ...
    @staticmethod
    def minor() -> ScaleFingerprint: ...
    @staticmethod
    def dorian() -> ScaleFingerprint: ...
    @staticmethod
    def mixolydian() -> ScaleFingerprint: ...
    @property
    def pattern(self) -> list[bool]: ...
    @property
    def chromatic_notes(self) -> list[int]: ...
    @property
    def scale_degrees(self) -> list[int]: ...
    def __str__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...

# Roman Numeral Analysis Classes

class PyChordGraphic:
    """Roman numeral graphic representation of a chord."""

    @property
    def symbol(self) -> str: ...
    @property
    def figured_bass(self) -> str: ...
    @property
    def quality(self) -> str: ...
    @property
    def applied(self) -> str: ...
    @property
    def borrowed(self) -> str: ...
    @property
    def alterations(self) -> list[str]: ...
    @property
    def suspensions(self) -> list[str]: ...
    @property
    def adds(self) -> list[str]: ...
    @property
    def omits(self) -> list[str]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class PyRelativeScaleDegrees:
    """Scale degrees relative to chord root."""

    @property
    def sd_numbers(self) -> list[int]: ...
    @property
    def sd_accs(self) -> list[str]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

# AI Engine Classes

class AiEngine:
    """AI-powered music analysis and suggestion engine."""

    def __init__(self) -> None: ...
    def initialize(self, training_data: list[Any]) -> bool: ...
    def is_initialized(self) -> bool: ...
    def get_memory_usage(self) -> int: ...
    def get_total_requests(self) -> int: ...
    def get_average_response_time(self) -> float: ...
    def get_cache_hit_rate(self) -> float: ...
    def get_total_patterns(self) -> int: ...
    def get_uptime_seconds(self) -> int: ...
    def shutdown(self) -> None: ...

class SuggestionContext:
    """Context for chord suggestions."""

    def __init__(self) -> None: ...
    @property
    def position(self) -> float: ...
    @position.setter
    def position(self, value: float) -> None: ...
    @property
    def valence(self) -> float: ...
    @valence.setter
    def valence(self, value: float) -> None: ...
    @property
    def complexity(self) -> float: ...
    @complexity.setter
    def complexity(self, value: float) -> None: ...
    def add_recent_chord(self, chord: Chord) -> None: ...
    def set_genre_weight(self, genre: str, weight: float) -> None: ...

class SuggestionConfig:
    """Configuration for chord suggestions."""

    def __init__(self) -> None: ...
    @property
    def max_suggestions(self) -> int: ...
    @max_suggestions.setter
    def max_suggestions(self, value: int) -> None: ...
    @property
    def min_confidence(self) -> float: ...
    @min_confidence.setter
    def min_confidence(self, value: float) -> None: ...
    @property
    def temperature(self) -> float: ...
    @temperature.setter
    def temperature(self, value: float) -> None: ...

class ChordSuggestion:
    """A chord suggestion with confidence score."""

    @property
    def chord(self) -> Chord: ...
    @property
    def confidence(self) -> float: ...
    @property
    def reasoning(self) -> str: ...

class DifficultyAssessment:
    """Assessment of chord progression difficulty."""

    @property
    def overall_score(self) -> float: ...
    @property
    def skill_level(self) -> str: ...
    @property
    def confidence(self) -> float: ...
    @property
    def harmonic_complexity(self) -> float: ...
    @property
    def rhythmic_complexity(self) -> float: ...
    @property
    def technical_complexity(self) -> float: ...
    @property
    def melodic_complexity(self) -> float: ...
    @property
    def unique_chords(self) -> int: ...
    @property
    def extended_harmonies(self) -> int: ...

class BassHarmonization:
    """Bass harmonization result."""

    @property
    def bass_notes(self) -> list[int]: ...
    @property
    def rhythm(self) -> list[int]: ...
    @property
    def confidence(self) -> float: ...
    @property
    def style(self) -> str: ...

# Serialization Classes

class Note:
    """Represents a musical note."""

    def __init__(self, scale_degree: int, octave: int) -> None: ...
    @staticmethod
    def rest() -> Note: ...
    @property
    def scale_degree(self) -> int: ...
    @property
    def octave(self) -> int: ...
    @property
    def is_rest(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class TokenLibrary:
    """Token library for ML tokenization."""

    def __init__(self) -> None: ...
    def add_token(self, name: str, data: bytes) -> None: ...
    def resolve_token(self, name: str) -> bytes | None: ...
    def size(self) -> int: ...

class Timeline:
    """Timeline for musical events."""

    def __init__(self) -> None: ...
    @property
    def beats(self) -> float: ...
    @property
    def events(self) -> list[Any]: ...
    def add_chord(self, beat: float, chord: Chord, duration: float) -> None: ...
    def add_note(self, beat: float, note: Note, duration: float) -> None: ...
    def add_rest(self, beat: float, duration: float) -> None: ...
    def __str__(self) -> str: ...

class TrieNode:
    """Trie node for pattern storage."""

    def __init__(self) -> None: ...
    @property
    def count(self) -> int: ...
    @property
    def children(self) -> int: ...
    @property
    def ids(self) -> list[str]: ...
    def add_pattern(self, pattern: list[bytes], pattern_id: str) -> None: ...
    def search_pattern(self, pattern: list[bytes]) -> list[str]: ...
    def __str__(self) -> str: ...

# Theory Functions

def get_chord_complexity(chord: Chord) -> float:
    """Calculate chord complexity score (0-10 scale)."""
    ...

def get_relative_chord_graphic(chord: Chord, scale: ScaleFingerprint) -> PyChordGraphic:
    """Generate complete Roman numeral representation."""
    ...

def get_stable_scale_degrees(chord: Chord, scale: ScaleFingerprint) -> list[str]:
    """Calculate stable scale degrees for a chord in scale context."""
    ...

def get_relative_scale_degrees(chord: Chord) -> PyRelativeScaleDegrees:
    """Calculate scale degrees relative to chord root."""
    ...

def is_valid_tri_sub(chord: Chord, scale_type: str) -> bool:
    """Validate tritone substitution eligibility."""
    ...

def is_isotonal(chord1: Chord, chord2: Chord, scale: ScaleFingerprint) -> bool:
    """Check if two chords are harmonically equivalent (isotonal)."""
    ...

def analyze_harmonic_function(chord: Chord, scale_type: str) -> str:
    """Analyze harmonic function of a chord."""
    ...

def chord_letter_to_lower_case(note_string: str) -> str:
    """Convert chord letter to lowercase while preserving accidentals."""
    ...

def chord_letter_to_upper_case(note_string: str) -> str:
    """Convert chord letter to uppercase while preserving accidentals."""
    ...

# Serialization Functions

def serialize_chord_to_binary(chord: Chord) -> bytes:
    """Serialize chord to 5-byte binary format."""
    ...

def deserialize_chord_from_binary(data: bytes) -> Chord:
    """Deserialize chord from 5-byte binary format."""
    ...

def chord_to_hex(chord: Chord) -> str:
    """Convert chord to hexadecimal string."""
    ...

def chord_from_hex(hex_string: str) -> Chord:
    """Create chord from hexadecimal string."""
    ...

# Tokenization Functions

def py_tokenize_duration(duration: float) -> str:
    """Tokenize duration value."""
    ...

def py_parse_duration_token(token: str) -> float:
    """Parse duration token back to float value."""
    ...

def py_tokenize_chord_as_raw(chord: Chord) -> str:
    """Tokenize chord as raw cluster."""
    ...

def py_detokenize_cluster(cluster_xml: str, scale: ScaleFingerprint) -> dict[str, Any]:
    """Detokenize cluster XML format."""
    ...

def py_detokenize_midi_like(tokens: list[str], scale: ScaleFingerprint) -> Timeline:
    """Detokenize MIDI-like tokens."""
    ...

# Hash and Compression Functions

def py_fast_hash(data: str) -> int:
    """Fast hash function."""
    ...

def py_fold_hash(base_hash: int, data: str) -> int:
    """Fold hash function (combining hashes)."""
    ...

def py_scale40_encode(pattern: list[bool]) -> str:
    """Encode scale pattern to string."""
    ...

def py_scale40_decode(encoded: str) -> list[bool]:
    """Decode scale pattern from string."""
    ...

# Trie Serialization Functions

def py_serialize_trie(trie: TrieNode) -> dict[str, Any]:
    """Serialize trie to dictionary."""
    ...

def py_deserialize_trie(data: dict[str, Any]) -> TrieNode:
    """Deserialize trie from dictionary."""
    ...

def py_validate_binary_format(data: bytes) -> bool:
    """Validate binary format."""
    ...

def py_reduce_chord_vocab(chords: list[bytes], target_size: int) -> list[bytes]:
    """Reduce chord vocabulary to target size."""
    ...

def py_augment_with_repeated(sequence: list[str], min_length: int) -> list[str]:
    """Augment sequence with repeated elements."""
    ...

# Token Validation Functions

def py_validate_token(token: str) -> bool:
    """Validate general token format."""
    ...

def py_validate_duration_token(token: str) -> bool:
    """Validate duration token format."""
    ...

def py_validate_raw_note_token(token: str) -> bool:
    """Validate raw note token format."""
    ...

def py_validate_octave_token(token: str) -> bool:
    """Validate octave token format."""
    ...

def py_validate_chord_cluster_token(token: str) -> bool:
    """Validate chord cluster token format."""
    ...

# Configuration Functions

def get_configuration_constants() -> dict[str, str]:
    """Get all configuration constants as a dictionary."""
    ...

def get_version() -> str:
    """Get the library version."""
    ...

def get_serialization_constants() -> dict[str, Any]:
    """Get serialization-related constants."""
    ...

# Error Classes

class ComposerError(Exception):
    """Base exception for composer errors."""

    @property
    def message(self) -> str: ...
    @property
    def error_type(self) -> str: ...

# Module Constants

constants: dict[str, Any]
__version__: str

# Type Aliases (for backward compatibility)
PyChord = Chord
PyScaleFingerprint = ScaleFingerprint
PyBorrowedScale = BorrowedScale
PyAiEngine = AiEngine
ChordGraphic = PyChordGraphic
RelativeScaleDegrees = PyRelativeScaleDegrees
PySuggestionContext = SuggestionContext
PySuggestionConfig = SuggestionConfig
PyChordSuggestion = ChordSuggestion
PyDifficultyAssessment = DifficultyAssessment
PyBassHarmonization = BassHarmonization
PyNote = Note
PyTokenLibrary = TokenLibrary
PyTimeline = Timeline
PyTrieNode = TrieNode
