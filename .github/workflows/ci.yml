name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Detect which components have changed to optimize CI execution
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      python: ${{ steps.filter.outputs.python }}
      wasm: ${{ steps.filter.outputs.wasm }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'rust/**'
              - '.github/workflows/**'
            python:
              - 'rust/crates/composer-core/**'
              - 'rust/crates/composer-config/**'
              - 'rust/crates/composer-serialization/**'
              - 'rust/crates/composer-ai/**'
              - 'rust/crates/composer-ffi/**'
              - 'python/**'
              - '.github/workflows/**'
            wasm:
              - 'rust/crates/composer-core/**'
              - 'rust/crates/composer-config/**'
              - 'rust/crates/composer-serialization/**'
              - 'rust/crates/composer-ai/**'
              - 'rust/crates/composer-wasm/**'
              - 'wasm/**'
              - '.github/workflows/**'
            docs:
              - 'rust/**'
              - 'python/**'
              - 'docs/**'
              - '*.md'
              - '.github/workflows/**'

  # Rust workspace CI - Core library and all crates
  rust-ci:
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust
          key: rust-ci

      - name: Check workspace format
        run: cargo fmt --all -- --check

      - name: Check workspace with clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Check workspace compilation
        run: cargo check --workspace --all-targets --all-features

      - name: Run workspace tests
        run: cargo test --workspace --all-features

      - name: Run workspace benchmarks (check only)
        run: cargo bench --workspace --no-run

      - name: Check documentation builds
        run: cargo doc --workspace --no-deps --all-features

  # Python package CI - Multi-version and multi-platform testing
  python-ci:
    needs: changes
    if: needs.changes.outputs.python == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for efficiency - test edge versions on all platforms
          # and middle versions on Ubuntu only
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./python
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust
          key: python-ci-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install nox
        run: uv tool install nox

      - name: Run linting (ruff)
        run: nox -s lint

      - name: Run type checking
        if: matrix.python-version != '3.8'  # ty might not support Python 3.8
        run: nox -s types
        continue-on-error: true  # ty is pre-alpha, allow failures

      - name: Build and test Python package
        run: nox -s tests -p ${{ matrix.python-version }}

      - name: Test package build
        run: nox -s build

  # WebAssembly CI - Node.js and browser testing
  wasm-ci:
    needs: changes
    if: needs.changes.outputs.wasm == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./wasm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust
          key: wasm-ci

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: wasm/package-lock.json

      - name: Install browser drivers for testing
        run: |
          # Install Firefox and Chrome drivers for headless browser testing
          sudo apt-get update
          sudo apt-get install -y firefox-esr
          
          # Install geckodriver
          GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r '.tag_name')
          wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz"
          tar -xzf "geckodriver-${GECKO_VERSION}-linux64.tar.gz"
          sudo mv geckodriver /usr/local/bin/
          
          # Install Chrome and chromedriver
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Install chromedriver
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
          wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip -q chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/

      - name: Install npm dependencies
        run: npm ci

      - name: Build WebAssembly packages
        run: npm run build

      - name: Run Node.js tests
        run: npm run test:wasm

      - name: Run browser tests
        run: npm run test:browser

      - name: Test Node.js example
        run: npm run test:node-example

      - name: Test TypeScript examples
        run: npm run test:ts-examples

      - name: Verify package can be published
        run: npm pack --dry-run

  # Documentation CI - Build docs and check for issues
  docs-ci:
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust
          key: docs-ci

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install nox
        run: uv tool install nox

      - name: Build documentation
        run: nox -s docs

      - name: Check documentation for broken links
        run: nox -s docs_linkcheck
        continue-on-error: true  # Don't fail CI on broken external links

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: python/docs/_build/html/
          retention-days: 30

  # Security and dependency scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Rust security audit
        uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run dependency review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'